{"version":3,"sources":["BottomRow.js","App.js","serviceWorker.js","index.js"],"names":["BottomRow","react_default","a","createElement","className","App","newHomeScore","newAwayScore","seconds","_useState","useState","_useState2","Object","slicedToArray","homeScore","homeScoreCount","_useState3","_useState4","awayScore","awayScoreCount","_useState5","_useState6","homeName","homeNameChange","_useState7","_useState8","awayName","awayNameChange","_useState9","_useState10","clockSeconds","clockSecondsChange","newHomeName","newAwayName","useEffect","timer","setInterval","clearInterval","onClick","prompt","isNaN","src_BottomRow","Number","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f649382d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst BottomRow = () => {\r\n  return (\r\n    <div className=\"bottomRow\">\r\n      <div className=\"down\">\r\n        <h3 className=\"down__title\">Down</h3>\r\n        <div className=\"down__value\">3</div>\r\n      </div>\r\n      <div className=\"toGo\">\r\n        <h3 className=\"toGo__title\">To Go</h3>\r\n        <div className=\"toGo__value\">7</div>\r\n      </div>\r\n      <div className=\"ballOn\">\r\n        <h3 className=\"ballOn__title\">Ball on</h3>\r\n        <div className=\"ballOn__value\">21</div>\r\n      </div>\r\n      <div className=\"quarter\">\r\n        <h3 className=\"quarter__title\">Quarter</h3>\r\n        <div className=\"quarter__value\">4</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BottomRow;\r\n","//TODO: STEP 1 - Import the useState hook.\r\nimport React, { useState, useEffect } from 'react';\r\nimport \"./App.css\";\r\nimport BottomRow from \"./BottomRow\";\r\n\r\n\r\nfunction App() {\r\n  //TODO: STEP 2 - Establish your applictaion's state with some useState hooks.  \r\n  //You'll need one for the home score and another for the away score.\r\n  const [homeScore, homeScoreCount] = useState(32);\r\n  const [awayScore, awayScoreCount] = useState(32);\r\n  const [homeName, homeNameChange] = useState('Lions');\r\n  const [awayName, awayNameChange] = useState('Tigers');\r\n  const [clockSeconds, clockSecondsChange] = useState(0);\r\n  let newHomeName = '';\r\n  let newAwayName = '';  \r\n  let newHomeScore;\r\n  let newAwayScore;\r\n  let seconds;\r\n\r\n  useEffect(() => {    \r\n    if (clockSeconds > 0) {      \r\n      const timer = setInterval(() => clockSecondsChange(clockSeconds - 1), 1000);\r\n      return () => clearInterval(timer)\r\n    } else {\r\n      return clockSecondsChange('Game Over');}\r\n    },[clockSeconds])\r\n\r\n    return (\r\n    <div className=\"container\">\r\n      <div className=\"buttons\">        \r\n        <button className=\"homeButtons__touchdown\" onClick={() => {\r\n          newHomeName = prompt('What is the name of the home team?')\r\n          homeNameChange(newHomeName);\r\n        }}>\r\n          Home Team Name\r\n        </button>\r\n        \r\n        <button className=\"homeButtons__touchdown\" onClick={() => {\r\n          newAwayName = prompt('What is the name of the away team?')\r\n          awayNameChange(newAwayName);\r\n        }}>\r\n          Home Team Name\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"buttons\">        \r\n        <button className=\"homeButtons__touchdown\" onClick={() => {\r\n          newHomeScore = prompt('How many points does the home team have?');\r\n          if (isNaN(newHomeScore)) {\r\n            newHomeScore =  prompt('That is not a number. Enter a number.')\r\n          }\r\n          homeScoreCount(newHomeScore);\r\n        }}>\r\n          Home Team Score\r\n        </button>\r\n        \r\n        <button className=\"homeButtons__touchdown\" onClick={() => {\r\n          newAwayScore = prompt('How many points does the away team have?');\r\n          if (isNaN(newAwayScore)) {\r\n            newAwayScore = prompt('That is not a number. Enter a number.')\r\n          }\r\n          awayScoreCount(newAwayScore)\r\n          //countDown();\r\n        }}>\r\n          Away Team Score\r\n        </button>\r\n      </div>\r\n\r\n      <div className='buttons'>\r\n        <button className='homeButtons_touchdown' onClick={() => {\r\n          seconds = prompt('How many seconds are left in the quarter?')\r\n          if (isNaN(seconds)) {\r\n            seconds = prompt('That is not a number. Enter a number.')\r\n          } else if (seconds > 59) {\r\n            seconds = prompt('Please enter a number less than 60.')\r\n          } else {\r\n          clockSecondsChange(seconds);}          \r\n        }}>\r\n          Seconds\r\n        </button>\r\n      </div>\r\n\r\n      <section className=\"scoreboard\">\r\n        <div className=\"topRow\">\r\n          <div className=\"home\">\r\n            <h2 className=\"home__name\">{homeName}</h2>\r\n\r\n            {/* TODO STEP 3 - We need to change the hardcoded values in these divs to accept dynamic \r\n            values from our state. */}\r\n\r\n            <div className=\"home__score\">{homeScore}</div>\r\n          </div>\r\n          <div className=\"timer\">00:{clockSeconds}</div>\r\n          <div className=\"away\">\r\n            <h2 className=\"away__name\">{awayName}</h2>\r\n            <div className=\"away__score\">{awayScore}</div>\r\n          </div>\r\n        </div>\r\n        <BottomRow />\r\n      </section>\r\n      <section className=\"buttons\">\r\n        <div className=\"homeButtons\">\r\n          {/* TODO STEP 4 - Now we need to attach our state setter functions to click listeners. */}\r\n          <button className=\"homeButtons__touchdown\" onClick={() => {\r\n            homeScoreCount(Number(homeScore) + 7);\r\n            }}>Home Touchdown          \r\n          </button>\r\n          <button className=\"homeButtons__fieldGoal\" onClick={() => {\r\n            homeScoreCount(Number(homeScore) + 3);\r\n            }}>Home Field Goal</button>\r\n        </div>\r\n        <div className=\"awayButtons\">\r\n          <button className=\"awayButtons__touchdown\" onClick={() => {\r\n            awayScoreCount(Number(awayScore) + 7);\r\n            }}>Away Touchdown</button>\r\n          <button className=\"awayButtons__fieldGoal\" onClick={() => {\r\n            awayScoreCount(Number(awayScore) + 3);\r\n            }}>Away Field Goal</button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}